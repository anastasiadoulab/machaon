# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import src.grpc_core.jobreceiver_pb2 as jobreceiver__pb2


class JobReceiverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartJob = channel.unary_unary(
                '/jobreceiver.JobReceiver/StartJob',
                request_serializer=jobreceiver__pb2.JobRequest.SerializeToString,
                response_deserializer=jobreceiver__pb2.JobStatus.FromString,
                )
        self.GetStatus = channel.unary_unary(
                '/jobreceiver.JobReceiver/GetStatus',
                request_serializer=jobreceiver__pb2.StatusRequest.SerializeToString,
                response_deserializer=jobreceiver__pb2.ServerStatus.FromString,
                )
        self.DownloadResult = channel.unary_stream(
                '/jobreceiver.JobReceiver/DownloadResult',
                request_serializer=jobreceiver__pb2.ResultRequest.SerializeToString,
                response_deserializer=jobreceiver__pb2.JobResult.FromString,
                )
        self.Synchronize = channel.stream_unary(
                '/jobreceiver.JobReceiver/Synchronize',
                request_serializer=jobreceiver__pb2.UncachedData.SerializeToString,
                response_deserializer=jobreceiver__pb2.ServerStatus.FromString,
                )


class JobReceiverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Synchronize(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JobReceiverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartJob': grpc.unary_unary_rpc_method_handler(
                    servicer.StartJob,
                    request_deserializer=jobreceiver__pb2.JobRequest.FromString,
                    response_serializer=jobreceiver__pb2.JobStatus.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=jobreceiver__pb2.StatusRequest.FromString,
                    response_serializer=jobreceiver__pb2.ServerStatus.SerializeToString,
            ),
            'DownloadResult': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadResult,
                    request_deserializer=jobreceiver__pb2.ResultRequest.FromString,
                    response_serializer=jobreceiver__pb2.JobResult.SerializeToString,
            ),
            'Synchronize': grpc.stream_unary_rpc_method_handler(
                    servicer.Synchronize,
                    request_deserializer=jobreceiver__pb2.UncachedData.FromString,
                    response_serializer=jobreceiver__pb2.ServerStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jobreceiver.JobReceiver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class JobReceiver(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobreceiver.JobReceiver/StartJob',
            jobreceiver__pb2.JobRequest.SerializeToString,
            jobreceiver__pb2.JobStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jobreceiver.JobReceiver/GetStatus',
            jobreceiver__pb2.StatusRequest.SerializeToString,
            jobreceiver__pb2.ServerStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/jobreceiver.JobReceiver/DownloadResult',
            jobreceiver__pb2.ResultRequest.SerializeToString,
            jobreceiver__pb2.JobResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Synchronize(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/jobreceiver.JobReceiver/Synchronize',
            jobreceiver__pb2.UncachedData.SerializeToString,
            jobreceiver__pb2.ServerStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
